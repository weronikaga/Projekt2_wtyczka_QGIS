# -*- coding: utf-8 -*-
"""
/***************************************************************************
 wtyczka_QGISDialog
                                 A QGIS plugin
 Wtyczka do obliczeń na wybranej warstwie
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-04
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Weronika_Garbacz/Emilia_Bartnik
        email                : 01179134@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'wtyczka_projekt_2_dialog_base.ui'))


class wtyczka_QGISDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(wtyczka_QGISDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.licz_przewyzszenie.clicked.connect(self.calculate_dh)
        self.licz_powierzchnie.clicked.connect(self.pole)

        
    def calculate_dh(self):
        selected_layer = self.mMapLayerComboBox.currentLayer()
        features = selected_layer.selectedFeatures()
        h_1 = float(features[0]['wysokosc'])
        h_2 = float(features[1]['wysokosc'])
        dh = h_2 - h_1
        self.wynik.setText(f'{dh} m')
        
        
        
    # def calculate_area(self):
    #     selected_layer = self.mMapLayerComboBox.currentLayer()
    #     features = selected_layer.selectedFeatures()
    #     x = float(features[0]['wysokosc'])
    #     y = float(features[1]['wysokosc'])
        
        
    def punkty(self):
        self.label_error.clear()
        selected_features = self.mMapLayerComboBox.currentLayer().selectedFeatures()
        pkt = []
        for feature in selected_features:
            feature_geometry = feature.geometry().asPoint()
            x = feature_geometry[0]
            y = feature_geometry[1]
            pkt.append([float(x), float(y)])
        
        pkt = self.sortuj_punkty(pkt)
        return pkt
        
    def pole(self):
        selected_features = self.mMapLayerComboBox_layers.currentLayer().selectedFeatures()
        
        if len(selected_features) < 3:
            self.label_error.setText('Zaznacz więcej punktów')
            return
        
        str_punkty = len(selected_features)
        pkt = []
        for feature in selected_features:
            feature_geometry = feature.geometry().asPoint()
            X = feature_geometry.x()
            Y = feature_geometry.y()
            pkt.append([X, Y])
        pkt = self.sortuj_punkty(pkt)

        n = len(pkt)
        if n < 3:
            self.wynik.setText('BŁĄD!')
            pole = 0
        
        else:
            pole = 0
            for i in range(n):
                P = (pkt[i][0] * pkt[(i+1) % n][1] - pkt[(i-1) % n][1] * pkt[i][0])
                pole += P
            
            pole = 0.5 * abs(pole)
            poletxt = f'{pole:.3f} [m2]'
       
            wynik_str = f'Pole powierzchni figury o wybranych {str_punkty} wierzchołkach wynosi: {pole:.3f} [m2]'
        return pole, str_punkty
